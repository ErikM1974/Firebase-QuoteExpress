{"ast":null,"code":"import React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { db } from '../firebase';\nimport { collection, getDocs, query, limit, startAfter, orderBy } from 'firebase/firestore';\nimport './EmbroideryCalculator.css';\n\n// ... (keep the existing code until the fetchAllStyles function)\n\nconst fetchAllStyles = useCallback(async () => {\n  console.log('Fetching all styles...');\n  setIsLoading(true);\n  setErrorMessage(null);\n  let retries = 3;\n  const pageSize = 50; // Adjust this value based on your needs\n  let lastDoc = null;\n  const fetchPage = async () => {\n    console.log('Creating Firestore query...');\n    let stylesQuery = query(collection(db, 'embroidery_products'), orderBy('STYLE_No'), limit(pageSize));\n    if (lastDoc) {\n      stylesQuery = query(collection(db, 'embroidery_products'), orderBy('STYLE_No'), startAfter(lastDoc), limit(pageSize));\n    }\n    console.log('Executing query...');\n    const queryStartTime = Date.now();\n    const querySnapshot = await getDocs(stylesQuery);\n    const queryEndTime = Date.now();\n    console.log(`Query executed in ${queryEndTime - queryStartTime}ms. Number of documents:`, querySnapshot.size);\n    return querySnapshot;\n  };\n  while (retries > 0) {\n    try {\n      const stylesData = {};\n      const styleSet = new Set();\n      let hasMoreDocs = true;\n      while (hasMoreDocs) {\n        const querySnapshot = await fetchPage();\n        querySnapshot.forEach(doc => {\n          const data = doc.data();\n          console.log('Document data:', data);\n          if (data.STYLE_No) {\n            styleSet.add(data.STYLE_No);\n            if (!stylesData[data.STYLE_No]) {\n              stylesData[data.STYLE_No] = data;\n            }\n          }\n        });\n        if (querySnapshot.size < pageSize) {\n          hasMoreDocs = false;\n        } else {\n          lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\n        }\n      }\n      console.log('Unique styles found:', styleSet.size);\n      setStyles(Array.from(styleSet));\n      setProductDatabase(stylesData);\n      console.log('Fetched styles:', stylesData);\n      break; // Exit the loop if successful\n    } catch (err) {\n      console.error('Error fetching styles:', err);\n      retries--;\n      if (retries === 0) {\n        setErrorMessage('Failed to load styles. Please try again later.');\n      } else {\n        console.log(`Retrying... ${retries} attempts left`);\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\n      }\n    }\n  }\n  setIsLoading(false);\n  console.log('Finished fetching styles.');\n}, []);\n\n// ... (keep the rest of the code unchanged)","map":{"version":3,"names":["React","useState","useCallback","useMemo","useEffect","AsyncSelect","db","collection","getDocs","query","limit","startAfter","orderBy","fetchAllStyles","console","log","setIsLoading","setErrorMessage","retries","pageSize","lastDoc","fetchPage","stylesQuery","queryStartTime","Date","now","querySnapshot","queryEndTime","size","stylesData","styleSet","Set","hasMoreDocs","forEach","doc","data","STYLE_No","add","docs","length","setStyles","Array","from","setProductDatabase","err","error","Promise","resolve","setTimeout"],"sources":["C:/Users/erik/Downloads/embroidered-order-form/src/components/EmbroideryCalculator.js"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect } from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs, query, limit, startAfter, orderBy } from 'firebase/firestore';\r\nimport './EmbroideryCalculator.css';\r\n\r\n// ... (keep the existing code until the fetchAllStyles function)\r\n\r\nconst fetchAllStyles = useCallback(async () => {\r\n  console.log('Fetching all styles...');\r\n  setIsLoading(true);\r\n  setErrorMessage(null);\r\n  let retries = 3;\r\n  const pageSize = 50; // Adjust this value based on your needs\r\n  let lastDoc = null;\r\n\r\n  const fetchPage = async () => {\r\n    console.log('Creating Firestore query...');\r\n    let stylesQuery = query(\r\n      collection(db, 'embroidery_products'),\r\n      orderBy('STYLE_No'),\r\n      limit(pageSize)\r\n    );\r\n\r\n    if (lastDoc) {\r\n      stylesQuery = query(\r\n        collection(db, 'embroidery_products'),\r\n        orderBy('STYLE_No'),\r\n        startAfter(lastDoc),\r\n        limit(pageSize)\r\n      );\r\n    }\r\n\r\n    console.log('Executing query...');\r\n    const queryStartTime = Date.now();\r\n    const querySnapshot = await getDocs(stylesQuery);\r\n    const queryEndTime = Date.now();\r\n    console.log(`Query executed in ${queryEndTime - queryStartTime}ms. Number of documents:`, querySnapshot.size);\r\n\r\n    return querySnapshot;\r\n  };\r\n\r\n  while (retries > 0) {\r\n    try {\r\n      const stylesData = {};\r\n      const styleSet = new Set();\r\n      let hasMoreDocs = true;\r\n\r\n      while (hasMoreDocs) {\r\n        const querySnapshot = await fetchPage();\r\n        \r\n        querySnapshot.forEach((doc) => {\r\n          const data = doc.data();\r\n          console.log('Document data:', data);\r\n          if (data.STYLE_No) {\r\n            styleSet.add(data.STYLE_No);\r\n            if (!stylesData[data.STYLE_No]) {\r\n              stylesData[data.STYLE_No] = data;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (querySnapshot.size < pageSize) {\r\n          hasMoreDocs = false;\r\n        } else {\r\n          lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n        }\r\n      }\r\n\r\n      console.log('Unique styles found:', styleSet.size);\r\n      setStyles(Array.from(styleSet));\r\n      setProductDatabase(stylesData);\r\n      console.log('Fetched styles:', stylesData);\r\n      break; // Exit the loop if successful\r\n    } catch (err) {\r\n      console.error('Error fetching styles:', err);\r\n      retries--;\r\n      if (retries === 0) {\r\n        setErrorMessage('Failed to load styles. Please try again later.');\r\n      } else {\r\n        console.log(`Retrying... ${retries} attempts left`);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\r\n      }\r\n    }\r\n  }\r\n  setIsLoading(false);\r\n  console.log('Finished fetching styles.');\r\n}, []);\r\n\r\n// ... (keep the rest of the code unchanged)\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACxE,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAASC,EAAE,QAAQ,aAAa;AAChC,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AAC3F,OAAO,4BAA4B;;AAEnC;;AAEA,MAAMC,cAAc,GAAGX,WAAW,CAAC,YAAY;EAC7CY,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrCC,YAAY,CAAC,IAAI,CAAC;EAClBC,eAAe,CAAC,IAAI,CAAC;EACrB,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,IAAIC,OAAO,GAAG,IAAI;EAElB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5BP,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,IAAIO,WAAW,GAAGb,KAAK,CACrBF,UAAU,CAACD,EAAE,EAAE,qBAAqB,CAAC,EACrCM,OAAO,CAAC,UAAU,CAAC,EACnBF,KAAK,CAACS,QAAQ,CAChB,CAAC;IAED,IAAIC,OAAO,EAAE;MACXE,WAAW,GAAGb,KAAK,CACjBF,UAAU,CAACD,EAAE,EAAE,qBAAqB,CAAC,EACrCM,OAAO,CAAC,UAAU,CAAC,EACnBD,UAAU,CAACS,OAAO,CAAC,EACnBV,KAAK,CAACS,QAAQ,CAChB,CAAC;IACH;IAEAL,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,MAAMQ,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACjC,MAAMC,aAAa,GAAG,MAAMlB,OAAO,CAACc,WAAW,CAAC;IAChD,MAAMK,YAAY,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC;IAC/BX,OAAO,CAACC,GAAG,CAAC,qBAAqBY,YAAY,GAAGJ,cAAc,0BAA0B,EAAEG,aAAa,CAACE,IAAI,CAAC;IAE7G,OAAOF,aAAa;EACtB,CAAC;EAED,OAAOR,OAAO,GAAG,CAAC,EAAE;IAClB,IAAI;MACF,MAAMW,UAAU,GAAG,CAAC,CAAC;MACrB,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC1B,IAAIC,WAAW,GAAG,IAAI;MAEtB,OAAOA,WAAW,EAAE;QAClB,MAAMN,aAAa,GAAG,MAAML,SAAS,CAAC,CAAC;QAEvCK,aAAa,CAACO,OAAO,CAAEC,GAAG,IAAK;UAC7B,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;UACvBrB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEoB,IAAI,CAAC;UACnC,IAAIA,IAAI,CAACC,QAAQ,EAAE;YACjBN,QAAQ,CAACO,GAAG,CAACF,IAAI,CAACC,QAAQ,CAAC;YAC3B,IAAI,CAACP,UAAU,CAACM,IAAI,CAACC,QAAQ,CAAC,EAAE;cAC9BP,UAAU,CAACM,IAAI,CAACC,QAAQ,CAAC,GAAGD,IAAI;YAClC;UACF;QACF,CAAC,CAAC;QAEF,IAAIT,aAAa,CAACE,IAAI,GAAGT,QAAQ,EAAE;UACjCa,WAAW,GAAG,KAAK;QACrB,CAAC,MAAM;UACLZ,OAAO,GAAGM,aAAa,CAACY,IAAI,CAACZ,aAAa,CAACY,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;QAC7D;MACF;MAEAzB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEe,QAAQ,CAACF,IAAI,CAAC;MAClDY,SAAS,CAACC,KAAK,CAACC,IAAI,CAACZ,QAAQ,CAAC,CAAC;MAC/Ba,kBAAkB,CAACd,UAAU,CAAC;MAC9Bf,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEc,UAAU,CAAC;MAC1C,MAAM,CAAC;IACT,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZ9B,OAAO,CAAC+B,KAAK,CAAC,wBAAwB,EAAED,GAAG,CAAC;MAC5C1B,OAAO,EAAE;MACT,IAAIA,OAAO,KAAK,CAAC,EAAE;QACjBD,eAAe,CAAC,gDAAgD,CAAC;MACnE,CAAC,MAAM;QACLH,OAAO,CAACC,GAAG,CAAC,eAAeG,OAAO,gBAAgB,CAAC;QACnD,MAAM,IAAI4B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC3D;IACF;EACF;EACA/B,YAAY,CAAC,KAAK,CAAC;EACnBF,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAC1C,CAAC,EAAE,EAAE,CAAC;;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}