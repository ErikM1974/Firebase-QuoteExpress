{"ast":null,"code":"import React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { db } from '../firebase';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport './EmbroideryCalculator.css';\n\n// ... (keep the existing code until the fetchAllStyles function)\n\nconst fetchAllStyles = useCallback(async () => {\n  console.log('Fetching all styles...');\n  setIsLoading(true);\n  setErrorMessage(null);\n  let retries = 3;\n  while (retries > 0) {\n    try {\n      const stylesQuery = query(collection(db, 'embroidery_orders'));\n      console.log('Executing query...');\n      const querySnapshot = await getDocs(stylesQuery);\n      console.log('Query executed. Number of documents:', querySnapshot.size);\n      const stylesData = {};\n      const styleSet = new Set();\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        console.log('Document data:', data);\n        if (data.STYLE_No) {\n          styleSet.add(data.STYLE_No);\n          if (!stylesData[data.STYLE_No]) {\n            stylesData[data.STYLE_No] = data;\n          }\n        }\n      });\n      console.log('Unique styles found:', styleSet.size);\n      setStyles(Array.from(styleSet));\n      setProductDatabase(stylesData);\n      console.log('Fetched styles:', stylesData);\n      break; // Exit the loop if successful\n    } catch (err) {\n      console.error('Error fetching styles:', err);\n      retries--;\n      if (retries === 0) {\n        setErrorMessage('Failed to load styles. Please try again later.');\n      } else {\n        console.log(`Retrying... ${retries} attempts left`);\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\n      }\n    }\n  }\n  setIsLoading(false);\n  console.log('Finished fetching styles.');\n}, []);\n\n// ... (keep the rest of the code unchanged)","map":{"version":3,"names":["React","useState","useCallback","useMemo","useEffect","AsyncSelect","db","collection","getDocs","query","where","fetchAllStyles","console","log","setIsLoading","setErrorMessage","retries","stylesQuery","querySnapshot","size","stylesData","styleSet","Set","forEach","doc","data","STYLE_No","add","setStyles","Array","from","setProductDatabase","err","error","Promise","resolve","setTimeout"],"sources":["C:/Users/erik/Downloads/embroidered-order-form/src/components/EmbroideryCalculator.js"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect } from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs, query, where } from 'firebase/firestore';\r\nimport './EmbroideryCalculator.css';\r\n\r\n// ... (keep the existing code until the fetchAllStyles function)\r\n\r\nconst fetchAllStyles = useCallback(async () => {\r\n  console.log('Fetching all styles...');\r\n  setIsLoading(true);\r\n  setErrorMessage(null);\r\n  let retries = 3;\r\n  while (retries > 0) {\r\n    try {\r\n      const stylesQuery = query(collection(db, 'embroidery_orders'));\r\n      console.log('Executing query...');\r\n      const querySnapshot = await getDocs(stylesQuery);\r\n      console.log('Query executed. Number of documents:', querySnapshot.size);\r\n      \r\n      const stylesData = {};\r\n      const styleSet = new Set();\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        console.log('Document data:', data);\r\n        if (data.STYLE_No) {\r\n          styleSet.add(data.STYLE_No);\r\n          if (!stylesData[data.STYLE_No]) {\r\n            stylesData[data.STYLE_No] = data;\r\n          }\r\n        }\r\n      });\r\n\r\n      console.log('Unique styles found:', styleSet.size);\r\n      setStyles(Array.from(styleSet));\r\n      setProductDatabase(stylesData);\r\n      console.log('Fetched styles:', stylesData);\r\n      break; // Exit the loop if successful\r\n    } catch (err) {\r\n      console.error('Error fetching styles:', err);\r\n      retries--;\r\n      if (retries === 0) {\r\n        setErrorMessage('Failed to load styles. Please try again later.');\r\n      } else {\r\n        console.log(`Retrying... ${retries} attempts left`);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\r\n      }\r\n    }\r\n  }\r\n  setIsLoading(false);\r\n  console.log('Finished fetching styles.');\r\n}, []);\r\n\r\n// ... (keep the rest of the code unchanged)\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACxE,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAASC,EAAE,QAAQ,aAAa;AAChC,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,OAAO,4BAA4B;;AAEnC;;AAEA,MAAMC,cAAc,GAAGT,WAAW,CAAC,YAAY;EAC7CU,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrCC,YAAY,CAAC,IAAI,CAAC;EAClBC,eAAe,CAAC,IAAI,CAAC;EACrB,IAAIC,OAAO,GAAG,CAAC;EACf,OAAOA,OAAO,GAAG,CAAC,EAAE;IAClB,IAAI;MACF,MAAMC,WAAW,GAAGR,KAAK,CAACF,UAAU,CAACD,EAAE,EAAE,mBAAmB,CAAC,CAAC;MAC9DM,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,MAAMK,aAAa,GAAG,MAAMV,OAAO,CAACS,WAAW,CAAC;MAChDL,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEK,aAAa,CAACC,IAAI,CAAC;MAEvE,MAAMC,UAAU,GAAG,CAAC,CAAC;MACrB,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC1BJ,aAAa,CAACK,OAAO,CAAEC,GAAG,IAAK;QAC7B,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;QACvBb,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEY,IAAI,CAAC;QACnC,IAAIA,IAAI,CAACC,QAAQ,EAAE;UACjBL,QAAQ,CAACM,GAAG,CAACF,IAAI,CAACC,QAAQ,CAAC;UAC3B,IAAI,CAACN,UAAU,CAACK,IAAI,CAACC,QAAQ,CAAC,EAAE;YAC9BN,UAAU,CAACK,IAAI,CAACC,QAAQ,CAAC,GAAGD,IAAI;UAClC;QACF;MACF,CAAC,CAAC;MAEFb,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,QAAQ,CAACF,IAAI,CAAC;MAClDS,SAAS,CAACC,KAAK,CAACC,IAAI,CAACT,QAAQ,CAAC,CAAC;MAC/BU,kBAAkB,CAACX,UAAU,CAAC;MAC9BR,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEO,UAAU,CAAC;MAC1C,MAAM,CAAC;IACT,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZpB,OAAO,CAACqB,KAAK,CAAC,wBAAwB,EAAED,GAAG,CAAC;MAC5ChB,OAAO,EAAE;MACT,IAAIA,OAAO,KAAK,CAAC,EAAE;QACjBD,eAAe,CAAC,gDAAgD,CAAC;MACnE,CAAC,MAAM;QACLH,OAAO,CAACC,GAAG,CAAC,eAAeG,OAAO,gBAAgB,CAAC;QACnD,MAAM,IAAIkB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC3D;IACF;EACF;EACArB,YAAY,CAAC,KAAK,CAAC;EACnBF,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAC1C,CAAC,EAAE,EAAE,CAAC;;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}