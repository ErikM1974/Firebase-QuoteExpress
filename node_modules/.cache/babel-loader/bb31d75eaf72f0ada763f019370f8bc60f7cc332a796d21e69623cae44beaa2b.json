{"ast":null,"code":"import React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { db } from '../firebase';\nimport { collection, getDocs, query, limit, startAfter, orderBy, where } from 'firebase/firestore';\nimport './EmbroideryCalculator.css';\n\n// ... (keep the existing code until fetchAllStyles function)\n\nconst fetchAllStyles = useCallback(async () => {\n  console.log('Fetching all styles...');\n  setIsLoading(true);\n  setErrorMessage(null);\n  let retries = 3;\n  const pageSize = 50;\n  let lastDoc = null;\n  const fetchPage = async () => {\n    console.log('Creating Firestore query...');\n    let stylesQuery = query(collection(db, 'embroidery_orders'), orderBy('STYLE_No'), limit(pageSize));\n    if (lastDoc) {\n      stylesQuery = query(collection(db, 'embroidery_orders'), orderBy('STYLE_No'), startAfter(lastDoc), limit(pageSize));\n    }\n    console.log('Executing query...');\n    const queryStartTime = Date.now();\n    try {\n      const querySnapshot = await getDocs(stylesQuery);\n      const queryEndTime = Date.now();\n      console.log(`Query executed in ${queryEndTime - queryStartTime}ms. Number of documents:`, querySnapshot.size);\n      return querySnapshot;\n    } catch (error) {\n      console.error('Error executing query:', error);\n      throw error;\n    }\n  };\n  while (retries > 0) {\n    try {\n      const stylesData = {};\n      const styleSet = new Set();\n      let hasMoreDocs = true;\n      while (hasMoreDocs) {\n        const querySnapshot = await fetchPage();\n        querySnapshot.forEach(doc => {\n          const data = doc.data();\n          console.log('Document data:', data);\n          if (data.STYLE_No) {\n            styleSet.add(data.STYLE_No);\n            if (!stylesData[data.STYLE_No]) {\n              stylesData[data.STYLE_No] = data;\n            }\n          }\n        });\n        if (querySnapshot.size < pageSize) {\n          hasMoreDocs = false;\n        } else {\n          lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\n        }\n      }\n      console.log('Unique styles found:', styleSet.size);\n      setStyles(Array.from(styleSet));\n      setProductDatabase(stylesData);\n      console.log('Fetched styles:', stylesData);\n      break; // Exit the loop if successful\n    } catch (err) {\n      console.error('Error fetching styles:', err);\n      retries--;\n      if (retries === 0) {\n        setErrorMessage(`Failed to load styles. Error: ${err.message}`);\n      } else {\n        console.log(`Retrying... ${retries} attempts left`);\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\n      }\n    }\n  }\n  setIsLoading(false);\n  console.log('Finished fetching styles.');\n}, []);\n\n// ... (keep the rest of the component code, but update any other occurrences of 'embroidery_products' to 'embroidery_orders')\n\nconst fetchColors = useCallback(async styleNo => {\n  if (!styleNo) return;\n  setIsLoading(true);\n  try {\n    console.log(`Fetching colors for style: ${styleNo}`);\n    const colorsQuery = query(collection(db, 'embroidery_orders'), where('STYLE_No', '==', styleNo));\n    const querySnapshot = await getDocs(colorsQuery);\n    const colorSet = new Set();\n    const productDetails = {};\n    querySnapshot.forEach(doc => {\n      const item = doc.data();\n      if (item.COLOR_NAME) colorSet.add(item.COLOR_NAME);\n      productDetails[item.COLOR_NAME] = item;\n    });\n    setColors(prevColors => ({\n      ...prevColors,\n      [styleNo]: Array.from(colorSet)\n    }));\n    setProductDatabase(prevDatabase => ({\n      ...prevDatabase,\n      [styleNo]: {\n        ...prevDatabase[styleNo],\n        colors: productDetails\n      }\n    }));\n    console.log('Fetched colors for style:', styleNo, Array.from(colorSet));\n  } catch (err) {\n    console.error('Error fetching colors:', err);\n    setErrorMessage('Failed to load color options. Please try again later.');\n  } finally {\n    setIsLoading(false);\n  }\n}, []);\n\n// ... (keep the rest of the component code unchanged)","map":{"version":3,"names":["React","useState","useCallback","useMemo","useEffect","AsyncSelect","db","collection","getDocs","query","limit","startAfter","orderBy","where","fetchAllStyles","console","log","setIsLoading","setErrorMessage","retries","pageSize","lastDoc","fetchPage","stylesQuery","queryStartTime","Date","now","querySnapshot","queryEndTime","size","error","stylesData","styleSet","Set","hasMoreDocs","forEach","doc","data","STYLE_No","add","docs","length","setStyles","Array","from","setProductDatabase","err","message","Promise","resolve","setTimeout","fetchColors","styleNo","colorsQuery","colorSet","productDetails","item","COLOR_NAME","setColors","prevColors","prevDatabase","colors"],"sources":["C:/Users/erik/Downloads/embroidered-order-form/src/components/EmbroideryCalculator.js"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect } from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs, query, limit, startAfter, orderBy, where } from 'firebase/firestore';\r\nimport './EmbroideryCalculator.css';\r\n\r\n// ... (keep the existing code until fetchAllStyles function)\r\n\r\nconst fetchAllStyles = useCallback(async () => {\r\n  console.log('Fetching all styles...');\r\n  setIsLoading(true);\r\n  setErrorMessage(null);\r\n  let retries = 3;\r\n  const pageSize = 50;\r\n  let lastDoc = null;\r\n\r\n  const fetchPage = async () => {\r\n    console.log('Creating Firestore query...');\r\n    let stylesQuery = query(\r\n      collection(db, 'embroidery_orders'),\r\n      orderBy('STYLE_No'),\r\n      limit(pageSize)\r\n    );\r\n\r\n    if (lastDoc) {\r\n      stylesQuery = query(\r\n        collection(db, 'embroidery_orders'),\r\n        orderBy('STYLE_No'),\r\n        startAfter(lastDoc),\r\n        limit(pageSize)\r\n      );\r\n    }\r\n\r\n    console.log('Executing query...');\r\n    const queryStartTime = Date.now();\r\n    try {\r\n      const querySnapshot = await getDocs(stylesQuery);\r\n      const queryEndTime = Date.now();\r\n      console.log(`Query executed in ${queryEndTime - queryStartTime}ms. Number of documents:`, querySnapshot.size);\r\n      return querySnapshot;\r\n    } catch (error) {\r\n      console.error('Error executing query:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  while (retries > 0) {\r\n    try {\r\n      const stylesData = {};\r\n      const styleSet = new Set();\r\n      let hasMoreDocs = true;\r\n\r\n      while (hasMoreDocs) {\r\n        const querySnapshot = await fetchPage();\r\n        \r\n        querySnapshot.forEach((doc) => {\r\n          const data = doc.data();\r\n          console.log('Document data:', data);\r\n          if (data.STYLE_No) {\r\n            styleSet.add(data.STYLE_No);\r\n            if (!stylesData[data.STYLE_No]) {\r\n              stylesData[data.STYLE_No] = data;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (querySnapshot.size < pageSize) {\r\n          hasMoreDocs = false;\r\n        } else {\r\n          lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n        }\r\n      }\r\n\r\n      console.log('Unique styles found:', styleSet.size);\r\n      setStyles(Array.from(styleSet));\r\n      setProductDatabase(stylesData);\r\n      console.log('Fetched styles:', stylesData);\r\n      break; // Exit the loop if successful\r\n    } catch (err) {\r\n      console.error('Error fetching styles:', err);\r\n      retries--;\r\n      if (retries === 0) {\r\n        setErrorMessage(`Failed to load styles. Error: ${err.message}`);\r\n      } else {\r\n        console.log(`Retrying... ${retries} attempts left`);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\r\n      }\r\n    }\r\n  }\r\n  setIsLoading(false);\r\n  console.log('Finished fetching styles.');\r\n}, []);\r\n\r\n// ... (keep the rest of the component code, but update any other occurrences of 'embroidery_products' to 'embroidery_orders')\r\n\r\nconst fetchColors = useCallback(async (styleNo) => {\r\n  if (!styleNo) return;\r\n\r\n  setIsLoading(true);\r\n  try {\r\n    console.log(`Fetching colors for style: ${styleNo}`);\r\n    const colorsQuery = query(collection(db, 'embroidery_orders'), where('STYLE_No', '==', styleNo));\r\n    const querySnapshot = await getDocs(colorsQuery);\r\n\r\n    const colorSet = new Set();\r\n    const productDetails = {};\r\n    querySnapshot.forEach((doc) => {\r\n      const item = doc.data();\r\n      if (item.COLOR_NAME) colorSet.add(item.COLOR_NAME);\r\n      productDetails[item.COLOR_NAME] = item;\r\n    });\r\n\r\n    setColors((prevColors) => ({\r\n      ...prevColors,\r\n      [styleNo]: Array.from(colorSet),\r\n    }));\r\n\r\n    setProductDatabase((prevDatabase) => ({\r\n      ...prevDatabase,\r\n      [styleNo]: {\r\n        ...prevDatabase[styleNo],\r\n        colors: productDetails,\r\n      },\r\n    }));\r\n\r\n    console.log('Fetched colors for style:', styleNo, Array.from(colorSet));\r\n  } catch (err) {\r\n    console.error('Error fetching colors:', err);\r\n    setErrorMessage('Failed to load color options. Please try again later.');\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n}, []);\r\n\r\n// ... (keep the rest of the component code unchanged)\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}